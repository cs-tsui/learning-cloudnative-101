(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{"013z":function(e,n,t){"use strict";t("KKXr"),t("pIFo");var a=t("pOBw"),o=t("q1tI"),r=t.n(o),c=t("NmYn"),l=t.n(c),b=t("OKom"),i=t("k4MR"),s=t("TSYQ"),p=t.n(s),m=t("QH2O"),d=t("qKvR"),u=function(e){var n,t=e.title,a=e.tabs,o=void 0===a?[]:a;return Object(d.b)("div",{className:p()(m.pageHeader,(n={},n[m.withTabs]=o.length,n))},Object(d.b)("div",{className:"bx--grid"},Object(d.b)("div",{className:"bx--row"},Object(d.b)("div",{className:"bx--col-lg-12"},Object(d.b)("h1",{id:"page-title",className:m.text},t)))))},j=t("pEPl"),O=t("BAC9"),v=function(e){var n=e.relativePagePath,t=e.repository,a=j.data.site.siteMetadata.repository,o=t||a,r=o.baseUrl,c=o.subDirectory,l=r+"/edit/"+o.branch+c+"/src/pages"+n;return r?Object(d.b)("div",{className:"bx--row "+O.row},Object(d.b)("div",{className:"bx--col"},Object(d.b)("a",{className:O.link,href:l},"Edit this page on GitHub"))):null},g=t("FCXl"),y=(t("Oyvg"),t("Wbzz")),h=t("I8xM");var f=function(e){var n,t;function a(){return e.apply(this,arguments)||this}return t=e,(n=a).prototype=Object.create(t.prototype),n.prototype.constructor=n,n.__proto__=t,a.prototype.render=function(){var e=this.props,n=e.tabs,t=e.slug,a=t.split("/").filter(Boolean).slice(-1)[0],o=n.map((function(e){var n,o=l()(e,{lower:!0}),r=o===a,c=new RegExp(a+"(?!-)"),b=t.replace(c,o);return Object(d.b)("li",{key:e,className:p()((n={},n[h.selectedItem]=r,n),h.listItem)},Object(d.b)(y.Link,{className:h.link,to:""+b},e))}));return Object(d.b)("div",{className:h.tabsContainer},Object(d.b)("div",{className:"bx--grid"},Object(d.b)("div",{className:"bx--row"},Object(d.b)("div",{className:"bx--col-lg-12 bx--col-no-gutter"},Object(d.b)("nav",null,Object(d.b)("ul",{className:h.list},o))))))},a}(r.a.Component),k=t("MjG9");n.a=function(e){var n=e.pageContext,t=e.children,o=e.location,r=e.Title,c=n.frontmatter,s=void 0===c?{}:c,p=n.relativePagePath,m=n.titleType,j=s.tabs,O=s.title,y=s.theme,h=s.description,x=s.keywords,N=a.data.site.pathPrefix,P=N?o.pathname.replace(N,""):o.pathname,w=j?P.split("/").slice(-1)[0]||l()(j[0],{lower:!0}):"";return Object(d.b)(i.a,{tabs:j,homepage:!1,theme:y,pageTitle:O,pageDescription:h,pageKeywords:x,titleType:m},Object(d.b)(u,{title:r?Object(d.b)(r,null):O,label:"label",tabs:j}),j&&Object(d.b)(f,{slug:P,tabs:j,currentTab:w}),Object(d.b)(k.a,{padded:!0},t,Object(d.b)(v,{relativePagePath:p})),Object(d.b)(g.a,{pageContext:n,location:o,slug:P,tabs:j,currentTab:w}),Object(d.b)(b.a,null))}},pEPl:function(e){e.exports=JSON.parse('{"data":{"site":{"id":"Site","siteMetadata":{"repository":{"baseUrl":"https://github.com/ibm-cloud-architecture/learning-cloudnative-101","subDirectory":"/","branch":"master"}}}}}')},pOBw:function(e){e.exports=JSON.parse('{"data":{"site":{"id":"Site","pathPrefix":"/learning-cloudnative-101"}}}')},zSoP:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return c})),t.d(n,"default",(function(){return m}));t("91GP"),t("rGqo"),t("yt8O"),t("Btvt"),t("RW0V"),t("q1tI");var a=t("7ljp"),o=t("013z");t("qKvR");function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}var c={},l=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(a.b)("div",n)}},b=l("Accordion"),i=l("AccordionItem"),s={_frontmatter:c},p=o.a;function m(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,["components"]);return Object(a.b)(p,r({},s,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",null,"Solutions"),Object(a.b)(b,{mdxType:"Accordion"},Object(a.b)(i,{title:"Lab 1 - Pod Creation",mdxType:"AccordionItem"},Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),'apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\n  namespace: web\nspec:\n  containers:\n    - name: nginx\n      image: nginx\n      command: ["nginx"]\n      args: ["-g", "daemon off;", "-q"]\n      ports:\n      - containerPort: 80\n'))),Object(a.b)(i,{title:"Lab 2 - Pod Configuration",mdxType:"AccordionItem"},Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: yoda-service-config\ndata:\n  yoda.cfg: |-\n    yoda.baby.power=100000000\n    yoda.strength=10\n")),Object(a.b)("hr",null),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"apiVersion: v1\nkind: Secret\nmetadata:\n  name: yoda-db-password\nstringData:\n  password: 0penSh1ftRul3s!\n")),Object(a.b)("hr",null),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),'apiVersion: v1\nkind: Pod\nmetadata:\n  name: yoda-service\nspec:\n  serviceAccountName: yoda-svc\n  containers:\n  - name: yoda-service\n    image: bitnami/nginx\n    volumeMounts:\n    - name: config-volume\n      mountPath: /etc/yoda-service\n    env:\n    - name: DB_PASSWORD\n      valueFrom:\n        secretKeyRef:\n          name: yoda-db-password\n          key: password\n    resources:\n      requests:\n        memory: "64Mi"\n        cpu: "250m"\n      limits:\n        memory: "128Mi"\n        cpu: "500m"\n  volumes:\n  - name: config-volume\n      configMap:\n        name: yoda-service-config\n'))),Object(a.b)(i,{title:"Lab 3 - Multiple Containers",mdxType:"AccordionItem"},Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: vader-service-ambassador-config\ndata:\n  haproxy.cfg: |-\n    global\n        daemon\n        maxconn 256\n\n    defaults\n        mode http\n        timeout connect 5000ms\n        timeout client 50000ms\n        timeout server 50000ms\n\n    listen http-in\n        bind *:80\n        server server1 127.0.0.1:8989 maxconn 32\n")),Object(a.b)("hr",null),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"apiVersion: v1\nkind: Pod\nmetadata:\n  name: vader-service\nspec:\n  containers:\n    - name: millennium-falcon\n      image: ibmcase/millennium-falcon:1\n    - name: haproxy-ambassador\n      image: haproxy:1.7\n      ports:\n      - containerPort: 80\n      volumeMounts:\n      - name: config-volume\n        mountPath: /usr/local/etc/haproxy\n  volumes:\n  - name: config-volume\n    configMap:\n      name: vader-service-ambassador-config\n")),Object(a.b)("hr",null),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"apiVersion: v1\nkind: Pod\nmetadata:\nname: busybox\nspec:\ncontainers:\n- name: myapp-container\n    image: radial/busyboxplus:curl\n    command: ['sh', '-c', 'while true; do sleep 3600; done']\n")),Object(a.b)("p",null,"   Check it with"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"kubectl exec busybox -- curl $(kubectl get pod fruit-service -o=jsonpath='{.status.podIP}'):80\n"))),Object(a.b)(i,{title:"Lab 4 - Probes",mdxType:"AccordionItem"},Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"apiVersion: v1\nkind: Pod\nmetadata:\n  name: energy-shield-service\nspec:\n  containers:\n  - name: energy-shield\n    image: ibmcase/energy-shield:1\n    livenessProbe:\n      httpGet:\n        path: /healthz\n        port: 8080\n    readinessProbe:\n      httpGet:\n        path: /ready\n        port: 8080\n      initialDelaySeconds: 5\n"))),Object(a.b)(i,{title:"Lab 5 - Debugging",mdxType:"AccordionItem"},Object(a.b)("p",null,"   Check ",Object(a.b)("inlineCode",{parentName:"p"},"STATUS")," column for not Ready"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"kubectl get pods --all-namespaces\n")),Object(a.b)("p",null,"   Pod with most cpu on that namespace"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"kubectl top pod -n <namespace>\n")),Object(a.b)("p",null,"   Save broken pod summary in json format"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"kubectl get pod <pod name> -n <namespace> -o json > /home/cloud_user/debug/broken-pod-summary.json\n")),Object(a.b)("p",null,"   Save logs for borken pod"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"kubectl logs <pod name> -n <namespace> > /home/cloud_user/debug/broken-pod-logs.log\n")),Object(a.b)("p",null,"   Fix broken pod, Check Events"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"kubectl describe pod <pod name> -n <namespace>\n")),Object(a.b)("p",null,"   To fix probe, can’t kubectl edit, need to delete and recreate pod"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"kubectl get pod <pod name> -n <namespace> -o yaml --export > broken-pod.yml\n")),Object(a.b)("p",null,"   Delete pod"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"kubectl delete pod <pod name> -n <namespace>\n")),Object(a.b)("p",null,"   Can also use ",Object(a.b)("inlineCode",{parentName:"p"},"kubectl replace")),Object(a.b)("p",null,"   Edit yaml, and apply"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"kubectl apply -f broken-pod.yml -n <namespace>\n")),Object(a.b)("p",null,"   Verify"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"kubectl get pod <pod name> -n <namespace>\n"))),Object(a.b)(i,{title:"Lab 6 - Rolling Updates",mdxType:"AccordionItem"},Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"Update the deployment to the new version like so:\n\nkubectl set image deployment/jedi-deployment jedi-ws=bitnamy/nginx:1.18.1 --record\n\nCheck the progress of the rolling update:\n\nkubectl rollout status deployment/jedi-deployment\n\nIn another terminal window\n\nkubectl get pods -w\n\nGet a list of previous revisions.\n\nkubectl rollout history deployment/jedi-deployment\n\nUndo the last revision.\n\nkubectl rollout undo deployment/jedi-deployment\n\nCheck the status of the rollout.\n\nkubectl rollout status deployment/jedi-deployment\n"))),Object(a.b)(i,{title:"Lab 7 - Cron Jobs",mdxType:"AccordionItem"},Object(a.b)("p",null,"apiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\nname: xwing-cronjob\nspec:\nschedule: ”",Object(a.b)("em",{parentName:"p"},"/1 ")," * * *”\njobTemplate:\nspec:\ntemplate:\nspec:\ncontainers:\n- name: xwing-status\nimage: ibmcase/xwing-status:1.0\nargs:\n- /usr/sbin/xwing-status.sh\nrestartPolicy: OnFailure"),Object(a.b)("hr",null),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"kubectl get cronjob xwing-cronjob\n"))),Object(a.b)(i,{title:"Lab 8 - Services",mdxType:"AccordionItem"},Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"apiVersion: v1\nkind: Service\nmetadata:\n    name: jedi-svc\nspec:\n    type: NodePort\n    selector:\n        app: jedi\n    ports:\n    - protocol: TCP\n        port: 80\n        targetPort: 8080\n")),Object(a.b)("hr",null),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"apiVersion: v1\nkind: Service\nmetadata:\nname: yoda-svc\nspec:\ntype: ClusterIP\nselector:\n    app: yoda\nports:\n- protocol: TCP\n    port: 80\n    targetPort: 8080\n"))),Object(a.b)(i,{title:"Lab 9 - Persistent Volumes",mdxType:"AccordionItem"},Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),'    kind: PersistentVolume\n    apiVersion: v1\n    metadata:\n    name: mysql-pv\n    spec:\n    storageClassName: localdisk\n    capacity:\n        storage: 1Gi\n    accessModes:\n        - ReadWriteOnce\n    hostPath:\n        path: "/mnt/data"\n')),Object(a.b)("hr",null),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"    apiVersion: v1\n    kind: PersistentVolumeClaim\n    metadata:\n    name: mysql-pv-claim\n    spec:\n    storageClassName: localdisk\n    accessModes:\n        - ReadWriteOnce\n    resources:\n        requests:\n        storage: 500Mi\n    \n")),Object(a.b)("hr",null),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"    apiVersion: v1\n    kind: Pod\n    metadata:\n    name: mysql-pod\n    spec:\n    containers:\n    - name: mysql\n        image: mysql:5.6\n        ports:\n        - containerPort: 3306\n        env:\n        - name: MYSQL_ROOT_PASSWORD\n        value: password\n        volumeMounts:\n        - name: mysql-storage\n        mountPath: /var/lib/mysql\n    volumes:\n    - name: mysql-storage\n        persistentVolumeClaim:\n        claimName: mysql-pv-claim\n    \n")),Object(a.b)("hr",null),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"    verify via `ls /mnt/data` on node\n")))))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-kubernetes-activities-labs-solutions-index-mdx-4788e29ec0c017a6a89f.js.map