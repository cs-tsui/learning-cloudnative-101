{"componentChunkName":"component---src-pages-project-cicd-index-mdx","path":"/project-cicd/","result":{"pageContext":{"frontmatter":{"title":"CICD Project","description":"CICD Project"},"relativePagePath":"/project-cicd/index.mdx","titleType":"page","MdxNode":{"id":"f8ddf6d4-f7ee-5be9-95a2-b7d9c199fe55","children":[],"parent":"69ef5688-7866-59f9-99df-bb96ff850290","internal":{"content":"---\ntitle: CICD Project\ndescription: CICD Project\n---\n\n## Challenge\n\nYou are provided with the challenge to implement a demo that shows best practices for DevOps.\nImplement Continous Integration and Continous Deployment for an Application on Kubernetes.\n\nYou are being provided with:\n- OpenShift 4\n- Git repository containing application source code\n- Git repository containing deployment manifests (ie. yamls)\n\n## Specifications\n\n### Access Cluster\n- Ask your instructors on how to gain access to OpenShift cluster\n- Create a new namespace to deploy the application `project-cicd-${userid}`\n\n### Code Repo\n- Git repository for Code is located https://github.com/ibm-cloud-architecture/cloudnative_sample_app\n- Create a new Git repository on your own public git account using the git repo as a template\n- Use the `Dockerfile` on the root of the repository to build an container image\n\n### Infra Repo\n- Git repository for Manifets (ie Yamls) is located https://github.com/ibm-cloud-architecture/cloudnative_sample_app_deploy\n- Create a new Git repository on your own public git account using the git repo as a template\n- The directory `yamls` on the repository contains the deployment manifests to deploy the app\n\n### Argocd\n- Argocd is already installed on the OpenShift cluster using an operator on the namespace `argocd`\n- To login into the Argocd use username `admin` and password the name of the argocd pod\n- Ge the ArgoCD UI URL with the following command\n    ```bash\n    export ARGOCD_URL=\"https://$(oc get route argocd-server -n argocd -o jsonpath='{.spec.host}')\"\n    echo \"ARGOCD URL=$ARGOCD_URL\"\n    open \"$ARGOCD_URL\"\n    ```\n- Deploy the application on the new namespace using infra git repositoryurl and configure with autosync when every time there is a change in the Infra repo.\n\n### Tekton\n- Tekton is already installed on the OpenShift cluster using an operator\n- The service account to use to run the pipelines is `pipeline` it automatically gets created on every new namespace\n- Use the following guide to create a Pipeline, Tasks, and secret:\n    ![Tekton Pipeline](images/tekton-pipeline.png)\n    - Create a pipeline, tasks, secrets on the target namespace\n    - Git clone the source code from the App repo\n    - Build a container image using the `Dockerfile` on the repo\n    - Tag the image using the 7 first characters of the git hash corresponding to last git commit\n    - Push the container image into the internal image registry on the same namespace\n    - Git clone the Infra git repo\n    - Update the image on the deployment yaml with the new image id that has the tag with value of the git commit\n    - Git commit the changes\n    - Git push the changes to the infra git repo, this should trigger argocd to pickup any changes from the infra repo.\n\n## Hints\n\n- Use [task-git-push.yaml](/yamls/project-cicd/task-git-push.yaml) as an example of Tekton steps to git clone, edit yaml files, and git push\n- Use [git-infra-secret.yaml](/yamls/project-cicd/git-infra-secret.yaml) as an example of Kubernetes secret being reference by the `git-push` task\n- The secret contains the git username and token with permission `repo` that gives write access to repository\n- OpenShift 4 comes with an internal image registry you can push from a Tekton task\n- The image registry url contains the service name, port, namespace, image name and tag\n    ```\n    image-registry.openshift-image-registry.svc:5000/my-namespace-app/image-name:my-tag\n    ```\n- The image registry only handles ssl/https connections, but it uses a self sign certificate\n- You need to ignore TLS-Verify to be able to succesfully push and ignore ssl errors for example using buildah set the flag `--tls-verify=\"false\"`\n\n\n## Extra Credit\n\n- Make the pipeline to run automatically every time new code gets pushed to the Code git repository\n  - Configure a Github Webhook using the new [Tekton Triggers](https://github.com/tektoncd/triggers) listener and bindings\n  - You can use the Tekton Getting Started as guide on how to implement the Webhook\n  - [Install](https://github.com/tektoncd/triggers/blob/master/docs/install.md) Triggers, check out the\n    [installation guide](https://github.com/tektoncd/triggers/blob/master/docs/install.md), [examples](https://github.com/tektoncd/triggers/blob/master/examples/README.md) or\n    follow the [getting started guide](https://github.com/tektoncd/triggers/blob/master/docs/getting-started/README.md) to become\n    familiar with the project. The getting started guide walks through setting up an\n    end-to-end image building solution, which will be triggered from GitHub `push`\n    events.\n","type":"Mdx","contentDigest":"e3d69810e055c7bc8c8e4b9f998cc9dd","counter":264,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"CICD Project","description":"CICD Project"},"exports":{},"rawBody":"---\ntitle: CICD Project\ndescription: CICD Project\n---\n\n## Challenge\n\nYou are provided with the challenge to implement a demo that shows best practices for DevOps.\nImplement Continous Integration and Continous Deployment for an Application on Kubernetes.\n\nYou are being provided with:\n- OpenShift 4\n- Git repository containing application source code\n- Git repository containing deployment manifests (ie. yamls)\n\n## Specifications\n\n### Access Cluster\n- Ask your instructors on how to gain access to OpenShift cluster\n- Create a new namespace to deploy the application `project-cicd-${userid}`\n\n### Code Repo\n- Git repository for Code is located https://github.com/ibm-cloud-architecture/cloudnative_sample_app\n- Create a new Git repository on your own public git account using the git repo as a template\n- Use the `Dockerfile` on the root of the repository to build an container image\n\n### Infra Repo\n- Git repository for Manifets (ie Yamls) is located https://github.com/ibm-cloud-architecture/cloudnative_sample_app_deploy\n- Create a new Git repository on your own public git account using the git repo as a template\n- The directory `yamls` on the repository contains the deployment manifests to deploy the app\n\n### Argocd\n- Argocd is already installed on the OpenShift cluster using an operator on the namespace `argocd`\n- To login into the Argocd use username `admin` and password the name of the argocd pod\n- Ge the ArgoCD UI URL with the following command\n    ```bash\n    export ARGOCD_URL=\"https://$(oc get route argocd-server -n argocd -o jsonpath='{.spec.host}')\"\n    echo \"ARGOCD URL=$ARGOCD_URL\"\n    open \"$ARGOCD_URL\"\n    ```\n- Deploy the application on the new namespace using infra git repositoryurl and configure with autosync when every time there is a change in the Infra repo.\n\n### Tekton\n- Tekton is already installed on the OpenShift cluster using an operator\n- The service account to use to run the pipelines is `pipeline` it automatically gets created on every new namespace\n- Use the following guide to create a Pipeline, Tasks, and secret:\n    ![Tekton Pipeline](images/tekton-pipeline.png)\n    - Create a pipeline, tasks, secrets on the target namespace\n    - Git clone the source code from the App repo\n    - Build a container image using the `Dockerfile` on the repo\n    - Tag the image using the 7 first characters of the git hash corresponding to last git commit\n    - Push the container image into the internal image registry on the same namespace\n    - Git clone the Infra git repo\n    - Update the image on the deployment yaml with the new image id that has the tag with value of the git commit\n    - Git commit the changes\n    - Git push the changes to the infra git repo, this should trigger argocd to pickup any changes from the infra repo.\n\n## Hints\n\n- Use [task-git-push.yaml](/yamls/project-cicd/task-git-push.yaml) as an example of Tekton steps to git clone, edit yaml files, and git push\n- Use [git-infra-secret.yaml](/yamls/project-cicd/git-infra-secret.yaml) as an example of Kubernetes secret being reference by the `git-push` task\n- The secret contains the git username and token with permission `repo` that gives write access to repository\n- OpenShift 4 comes with an internal image registry you can push from a Tekton task\n- The image registry url contains the service name, port, namespace, image name and tag\n    ```\n    image-registry.openshift-image-registry.svc:5000/my-namespace-app/image-name:my-tag\n    ```\n- The image registry only handles ssl/https connections, but it uses a self sign certificate\n- You need to ignore TLS-Verify to be able to succesfully push and ignore ssl errors for example using buildah set the flag `--tls-verify=\"false\"`\n\n\n## Extra Credit\n\n- Make the pipeline to run automatically every time new code gets pushed to the Code git repository\n  - Configure a Github Webhook using the new [Tekton Triggers](https://github.com/tektoncd/triggers) listener and bindings\n  - You can use the Tekton Getting Started as guide on how to implement the Webhook\n  - [Install](https://github.com/tektoncd/triggers/blob/master/docs/install.md) Triggers, check out the\n    [installation guide](https://github.com/tektoncd/triggers/blob/master/docs/install.md), [examples](https://github.com/tektoncd/triggers/blob/master/examples/README.md) or\n    follow the [getting started guide](https://github.com/tektoncd/triggers/blob/master/docs/getting-started/README.md) to become\n    familiar with the project. The getting started guide walks through setting up an\n    end-to-end image building solution, which will be triggered from GitHub `push`\n    events.\n","fileAbsolutePath":"/home/travis/build/ibm-cloud-architecture/learning-cloudnative-101/src/pages/project-cicd/index.mdx"}}}}