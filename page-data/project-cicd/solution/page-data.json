{"componentChunkName":"component---src-pages-project-cicd-solution-mdx","path":"/project-cicd/solution/","result":{"pageContext":{"frontmatter":{"title":"CICD Project Solution","description":"CICD Project Solution"},"relativePagePath":"/project-cicd/solution.mdx","titleType":"page","MdxNode":{"id":"f06dae26-f749-56ea-9107-9fff3be2dd64","children":[],"parent":"296be6be-35e4-596f-8dad-0fe36daab0e4","internal":{"content":"---\ntitle: CICD Project Solution\ndescription: CICD Project Solution\n---\n\n<AnchorLinks>\n  <AnchorLink>OpenShift Setup</AnchorLink>\n  <AnchorLink>Configure Github Personal Access Token</AnchorLink>\n  <AnchorLink>ArgoCD Configuration</AnchorLink>\n  <AnchorLink>Tekton Pipeline Configuration</AnchorLink>\n  <AnchorLink>Tekton Trigger Configuration</AnchorLink>\n</AnchorLinks>\n\n\n## OpenShift Setup\n\n- Create a new project `bootcamp-cicd-${userid}` all lowercase, and no spaces\n    ```bash\n    oc new-project bootcamp-cicd-${userid}\n    ```\n- Set the environment variable `NAMESPACE` to be use during Solution\n    ```bash\n    export NAMESPACE=$(oc project -q)\n    echo \"NAMESPACE set to $NAMESPACE\"\n    ```\n\n## Configure Github Personal Access Token\n\n- For your CI pipeline to connect to and use your GitHub repo, it will need a [GitHub personal access token](https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line) with `public_repo` and `write:repo_hook` scopes. \n- Navigate to [Developer Settings](https://github.com/settings/tokens) and generate a new token; name it something like \"CI pipeline\"\n- Select `public_repo` scope to enable git clone\n- Select `write:repo_hook` scope so the pipeline can create a web hook\n![Pipeline OAuth scopes](images/github-access-token.png)\n- The GitHub UI will never again let you see this token, so be sure to **save the token** in your password manager or somewhere safe that you can access later on\n- Create the secret for the Infra repository, replace `<GIT_USERNAME>` and `<GIT_TOKEN>`, keep the quotes\n    ```bash\n    export GIT_USERNAME='<GIT_USERNAME>'\n    export GIT_TOKEN='<GIT_TOKEN>'\n    ```\n    ```bash\n    oc create secret generic git-infra-secret --from-literal=username=\"$GIT_USERNAME\" --from-literal=token=\"$GIT_TOKEN\"\n    ```\n\n## ArgoCD Configuration\n\n- Create a new Infra repository using the following git repo as template https://github.com/ibm-cloud-architecture/cloudnative_sample_app_deploy\n- The new location of the Infra repository would look like `https://github.com/${GIT_USER}/cloudnative_sample_app_deploy`\n- Access the ArgoCD UI, to get the server url run the following command\n    ```bash\n    export ARGOCD_URL=$(oc get route argocd-server -n argocd -o jsonpath='{.spec.host}')\n    echo \"ARGOCD URL: https://$ARGOCD_URL\"\n    ```\n- Login into ArgoCD UI using `admin` as username and for the password get the name of the pod for the argocd server running the following command\n    ```bash\n    oc get pods -n argocd -l app.kubernetes.io/name=argocd-server -o name | cut -d'/' -f 2\n    ```\n- Create a new ArgoCD application using the UI or CLI\n  - SYNC POLICY: `Automatic`\n  - Application Name: `${userid}-app`\n  - REPO URL: `https://github.com/${GIT_USER}/cloudnative_sample_app_deploy`\n  - Revision: `master`\n  - Path: `yamls`\n  - Cluster: `https://kubernetes.default.svc` to deploy in-cluster\n  - Namespace: `bootcamp-cicd-${userid}`\n- Expose application by creating a `route.yaml`\n    ```bash\n    cat <<'EOF' >route.yaml\n    apiVersion: route.openshift.io/v1\n    kind: Route\n    metadata:\n      name: cloudnativesampleapp-route\n    spec:\n      port:\n        targetPort: http\n      to:\n        kind: Service\n        name: cloudnativesampleapp-service\n    EOF\n    ```\n- Apply the `route.yaml`\n    ```bash\n    oc apply -f route.yaml -n $NAMESPACE\n    ```\n- Test the Application usin the new route\n    ```bash\n    export APP_URL=$(oc get route cloudnativesampleapp-route -o jsonpath='{.spec.host}' -n $NAMESPACE)\n    curl http://$APP_URL/greeting?name=Carlos\n    ```\n\n## Tekton Pipeline Configuration\n\n- Create a new Code repository using the following git repo as template https://github.com/ibm-cloud-architecture/cloudnative_sample_app\n- The new location of the Code repository would look like `https://github.com/${GIT_USER}/cloudnative_sample_app`\n- Create a git resource yaml **git.yaml**, replace `<GIT_USERNAME>` with the git username or organization\n    ```bash\n    export GIT_USERNAME='<GIT_USERNAME>'\n    ```\n    ```bash\n    cat <<EOF >git.yaml\n    apiVersion: tekton.dev/v1alpha1\n    kind: PipelineResource\n    metadata:\n      name: source\n    spec:\n      type: git\n      params:\n        - name: revision\n          value: master\n        - name: url\n          value: https://github.com/$GIT_USERNAME/cloudnative_sample_app\n    EOF\n    ```\n    - Apply the `git.yaml`\n    ```bash\n    oc apply -f git.yaml -n $NAMESPACE\n    ```\n- Create an image resource yaml **image.yaml**, the image url needs to specify the target namespace in `$NAMESPACE` for the `default` ServiceAccount in the namespace to be able to pull the image from the internal registry\n    ```bash\n    cat <<EOF >image.yaml\n    apiVersion: tekton.dev/v1alpha1\n    kind: PipelineResource\n    metadata:\n      name: image\n    spec:\n      type: image\n      params:\n        - name: url\n          value: image-registry.openshift-image-registry.svc:5000/$NAMESPACE/cloudnative_sample_app\n    EOF\n    ```\n    - Apply the `image.yaml`\n    ```bash\n    oc apply -f image.yaml -n $NAMESPACE\n    ```\n- Verify the resources\n    ```bash\n    tkn resource ls  -n $NAMESPACE\n    ```\n    ```\n    NAME     TYPE    DETAILS\n    source   git     url: https://github.com/csantanapr/cloudnative_sample_app\n    image    image   url: image-registry.openshift-image-registry.svc:5000/bootcamp-cicd-carlos/cloudnative_sample_app\n    ```\n- Download the task file [task-build-git.yaml](/yamls/project-cicd/solution/task-build-git.yaml) to build the image, push the image to the registy, and update the Infra git repository\n- Apply manifest\n    ```bash\n    oc apply -f task-build-git.yaml -n $NAMESPACE\n    ```\n- Verify tasks\n    ```bash\n    tkn task ls -n $NAMESPACE\n    ```\n    ```\n    NAME        AGE\n    build-git   8 minutes ago\n    ```\n- Test the task using your own Infra git repository, replace the parameters values `<GIT_EMAIL>`, `<GIT_NAME>`, and `<GIT_REPOSITORY>` with your Infra git repository.\n- Excluding the protocol scheme `https://` for example `github.com/csantanapr/cloudnative_sample_app_deploy.git`\n    ```bash\n    export GIT_EMAIL='<GIT_EMAIL>'\n    export GIT_NAME='<GIT_NAME>'\n    export GIT_REPOSITORY='<GIT_REPOSITORY>'\n    ```\n    ```bash\n    tkn task start build-git \\\n            --showlog \\\n            -i source=source \\\n            -i image=image \\\n            -p GIT_EMAIL=$GIT_EMAIL \\\n            -p GIT_NAME=$GIT_NAME \\\n            -p GIT_REPOSITORY=$GIT_REPOSITORY \\\n            -s pipeline \\\n            -n $NAMESPACE\n    ```\n- Verify last task run \n    ```bash\n    tkn taskrun ls --limit 1 -n $NAMESPACE\n    ```\n    ```\n    NAME                  STARTED         DURATION    STATUS               \n    build-git-run-d2j88   7 minutes ago   2 minutes   Succeeded\n    ```\n- Create a Pipeline **pipeline.yaml** with the task, replace the parameters values `<GIT_EMAIL>`, `<GIT_NAME>`, and `<GIT_REPOSITORY>`  with your Infra git repository.\n- Excluding the protocol scheme `https://` for example `github.com/csantanapr/cloudnative_sample_app_deploy.git`\n    ```bash\n    export GIT_EMAIL='<GIT_EMAIL>'\n    export GIT_NAME='<GIT_NAME>'\n    export GIT_REPOSITORY='<GIT_REPOSITORY>'\n    ```\n    ```bash\n    cat <<EOF >pipeline.yaml\n    apiVersion: tekton.dev/v1alpha1\n    kind: Pipeline\n    metadata:\n      name: project-cicd\n    spec:\n      resources:\n        - name: source\n          type: git\n        - name: image\n          type: image\n      tasks:\n        - name: task\n          taskRef:\n            name: build-git\n          resources:\n            inputs:\n              - name: source\n                resource: source\n              - name: image\n                resource: image\n          params:\n            - name: GIT_REPOSITORY\n              value: $GIT_REPOSITORY\n            - name: GIT_EMAIL\n              value: $GIT_EMAIL\n            - name: GIT_NAME\n              value: $GIT_NAME\n    EOF\n    ```\n- Apply manifest\n    ```bash\n    oc apply -f pipeline.yaml -n $NAMESPACE\n    ```\n- Verify pipeline\n    ```bash\n    tkn pipeline ls -n $NAMESPACE\n    ```\n    ```\n    NAME           AGE              LAST RUN   STARTED   DURATION   STATUS\n    project-cicd   22 seconds ago   ---        ---       ---        ---\n    ```\n- Run the Pipeline using the sevice account `pipeline`\n    ```bash\n    tkn pipeline start project-cicd \\\n            --showlog \\\n            -r source=source \\\n            -r image=image \\\n            -s pipeline \\\n            -n $NAMESPACE\n    ```\n- Verify las Pipeline Run\n    ```bash\n    tkn pipelinerun ls --limit 1 -n $NAMESPACE\n    ```\n    ```\n    NAME                     STARTED         DURATION    STATUS               \n    project-cicd-run-wvf82   4 minutes ago   2 minutes   Succeeded\n    ```\n\n## Tekton Trigger Configuration\n\n- Create the Trigger Template file **trigger-template.yaml**\n    ```bash\n    cat <<'EOF' >trigger-template.yaml\n    apiVersion: tekton.dev/v1alpha1\n    kind: TriggerTemplate\n    metadata:\n      name: project-cicd\n    spec:\n      params:\n        - name: gitrevision\n          description: The git revision\n          default: master\n        - name: gitrepositoryurl\n          description: The git repository url\n      resourcetemplates:\n        - apiVersion: tekton.dev/v1alpha1\n          kind: PipelineRun\n          metadata:\n            generateName: project-cicd-run-\n          spec:\n            pipelineRef:\n              name: project-cicd\n            resources:\n              - name: image\n                resourceRef:\n                  name: image\n              - name: source\n                resourceSpec:\n                  type: git\n                  params:\n                    - name: revision\n                      value: $(params.gitrevision)\n                    - name: url\n                      value: $(params.gitrepositoryurl)\n    EOF\n    ```\n- Apply manifest\n    ```bash\n    oc apply -f trigger-template.yaml -n $NAMESPACE\n    ```\n- Create the Trigger Template file **trigger-binding.yaml**\n    ```bash\n    cat <<'EOF' >trigger-binding.yaml\n    apiVersion: tekton.dev/v1alpha1\n    kind: TriggerBinding\n    metadata:\n      name: project-cicd\n    spec:\n      params:\n        - name: gitrevision\n          value: $(body.head_commit.id)\n        - name: gitrepositoryurl\n          value: $(body.repository.url)\n        - name: contenttype\n          value: $(header.Content-Type)\n    EOF\n    ```\n- Apply manifest\n    ```bash\n    oc apply -f trigger-binding.yaml -n $NAMESPACE\n    ```\n- Create the Trigger Template file **trigger-listerner.yaml**\n    ```bash\n    cat <<'EOF' >trigger-listerner.yaml\n    apiVersion: tekton.dev/v1alpha1\n    kind: EventListener\n    metadata:\n      name: project-cicd\n    spec:\n      serviceAccountName: pipeline\n      triggers:\n        - name: project-cicd-trig\n          binding:\n            name: project-cicd\n          template:\n            name: project-cicd\n    EOF\n    ```\n- Apply manifest\n    ```bash\n    oc apply -f trigger-listerner.yaml -n $NAMESPACE\n    ```\n- To test in a new terminal start a port forward session\n    ```bash\n    kubectl port-forward $(oc get pod -o=name -l eventlistener=project-cicd) 8080 -n $NAMESPACE\n    ```\n- Now send a HTTP Request simulating a Github webhook event, replace the `url` value below.\n    ```bash\n    curl -X POST \\\n      https://el-project-cicd-bootcamp-cicd-carlos.cpat-dev-bootcamp-ocp43-afb9c6047b062b44e3f1b3ecfeba4309-0000.us-south.containers.appdomain.cloud \\\n      -H 'Content-Type: application/json' \\\n      -H 'X-Hub-Signature: sha1=2da37dcb9404ff17b714ee7a505c384758ddeb7b' \\\n      -d '{\n            \"head_commit\":\n            {\n                    \"id\": \"master\"\n            },\n            \"repository\":\n            {\n                    \"url\": \"https://github.com/csantanapr/cloudnative_sample_app.git\"\n            }\n    }'\n    ```\n- Verify Pipeline run is running\n    ```bash\n    tkn pipelinerun ls --limit 1 -n $NAMESPACE  \n    ```\n    ```                                                        \n    NAME                     STARTED         DURATION   STATUS             \n    project-cicd-run-xcjt8   5 seconds ago   ---        Running\n    ```\n    Get the logs\n    ```bash\n    tkn pipelinerun logs -f -a -n $NAMESPACE project-cicd-run-xcjt8\n    ```\n- Expose Event Listener service via secure route\n    ```bash\n    oc create route edge --service=el-project-cicd\n    ```\n- Get the URL to configure in Git repository Web Hook \n    ```bash\n    export GIT_WEBHOOL_URL=$(oc get route el-project-cicd -o jsonpath='{.spec.host}' -n $NAMESPACE)\n    echo \"https://$GIT_WEBHOOL_URL\"\n    ```\n- Create the Git Web Hook Manually to send `push` events or create programatically below, replace `<GIT_REPO_NAME>` for Code repo name\n    ```bash\n    export GIT_USERNAME='<GIT_USERNAME>'\n    export GIT_TOKEN='<GIT_TOKEN>'\n    export GIT_REPO_NAME='<GIT_REPO_NAME>'\n    ```\n- Run `curl` to create the web hook\n```bash\ncurl -v -X POST -u $GIT_USERNAME:$GIT_TOKEN \\\n-d \"{\\\"name\\\": \\\"web\\\",\\\"active\\\": true,\\\"events\\\": [\\\"push\\\"],\\\"config\\\": {\\\"url\\\": \\\"https://$GIT_WEBHOOL_URL\\\",\\\"content_type\\\": \\\"json\\\",\\\"insecure_ssl\\\": \\\"0\\\"}}\"  -L https://api.github.com/repos/$GIT_USERNAME/$GIT_REPO_NAME/hooks\n```\n**NOTE** Do not share the url, as it's not configure with secret, for production configure the listener and the git web hook with a secret\n- Make a change on the Code repository, and verify that Github sent the WebHook to the event listener, and that the Pipeline runs in OpenShift Console\n![WebHook to Pipeline](images/webhook-pipeline.png)\n- After the Pipeline run is done, wait a few minutes the application should be updated by ArgoCD\n![ArgoCD App Updated](images/argocd.png)\n","type":"Mdx","contentDigest":"31636d5a8592ec17ede8e384518ddc67","counter":282,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"CICD Project Solution","description":"CICD Project Solution"},"exports":{},"rawBody":"---\ntitle: CICD Project Solution\ndescription: CICD Project Solution\n---\n\n<AnchorLinks>\n  <AnchorLink>OpenShift Setup</AnchorLink>\n  <AnchorLink>Configure Github Personal Access Token</AnchorLink>\n  <AnchorLink>ArgoCD Configuration</AnchorLink>\n  <AnchorLink>Tekton Pipeline Configuration</AnchorLink>\n  <AnchorLink>Tekton Trigger Configuration</AnchorLink>\n</AnchorLinks>\n\n\n## OpenShift Setup\n\n- Create a new project `bootcamp-cicd-${userid}` all lowercase, and no spaces\n    ```bash\n    oc new-project bootcamp-cicd-${userid}\n    ```\n- Set the environment variable `NAMESPACE` to be use during Solution\n    ```bash\n    export NAMESPACE=$(oc project -q)\n    echo \"NAMESPACE set to $NAMESPACE\"\n    ```\n\n## Configure Github Personal Access Token\n\n- For your CI pipeline to connect to and use your GitHub repo, it will need a [GitHub personal access token](https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line) with `public_repo` and `write:repo_hook` scopes. \n- Navigate to [Developer Settings](https://github.com/settings/tokens) and generate a new token; name it something like \"CI pipeline\"\n- Select `public_repo` scope to enable git clone\n- Select `write:repo_hook` scope so the pipeline can create a web hook\n![Pipeline OAuth scopes](images/github-access-token.png)\n- The GitHub UI will never again let you see this token, so be sure to **save the token** in your password manager or somewhere safe that you can access later on\n- Create the secret for the Infra repository, replace `<GIT_USERNAME>` and `<GIT_TOKEN>`, keep the quotes\n    ```bash\n    export GIT_USERNAME='<GIT_USERNAME>'\n    export GIT_TOKEN='<GIT_TOKEN>'\n    ```\n    ```bash\n    oc create secret generic git-infra-secret --from-literal=username=\"$GIT_USERNAME\" --from-literal=token=\"$GIT_TOKEN\"\n    ```\n\n## ArgoCD Configuration\n\n- Create a new Infra repository using the following git repo as template https://github.com/ibm-cloud-architecture/cloudnative_sample_app_deploy\n- The new location of the Infra repository would look like `https://github.com/${GIT_USER}/cloudnative_sample_app_deploy`\n- Access the ArgoCD UI, to get the server url run the following command\n    ```bash\n    export ARGOCD_URL=$(oc get route argocd-server -n argocd -o jsonpath='{.spec.host}')\n    echo \"ARGOCD URL: https://$ARGOCD_URL\"\n    ```\n- Login into ArgoCD UI using `admin` as username and for the password get the name of the pod for the argocd server running the following command\n    ```bash\n    oc get pods -n argocd -l app.kubernetes.io/name=argocd-server -o name | cut -d'/' -f 2\n    ```\n- Create a new ArgoCD application using the UI or CLI\n  - SYNC POLICY: `Automatic`\n  - Application Name: `${userid}-app`\n  - REPO URL: `https://github.com/${GIT_USER}/cloudnative_sample_app_deploy`\n  - Revision: `master`\n  - Path: `yamls`\n  - Cluster: `https://kubernetes.default.svc` to deploy in-cluster\n  - Namespace: `bootcamp-cicd-${userid}`\n- Expose application by creating a `route.yaml`\n    ```bash\n    cat <<'EOF' >route.yaml\n    apiVersion: route.openshift.io/v1\n    kind: Route\n    metadata:\n      name: cloudnativesampleapp-route\n    spec:\n      port:\n        targetPort: http\n      to:\n        kind: Service\n        name: cloudnativesampleapp-service\n    EOF\n    ```\n- Apply the `route.yaml`\n    ```bash\n    oc apply -f route.yaml -n $NAMESPACE\n    ```\n- Test the Application usin the new route\n    ```bash\n    export APP_URL=$(oc get route cloudnativesampleapp-route -o jsonpath='{.spec.host}' -n $NAMESPACE)\n    curl http://$APP_URL/greeting?name=Carlos\n    ```\n\n## Tekton Pipeline Configuration\n\n- Create a new Code repository using the following git repo as template https://github.com/ibm-cloud-architecture/cloudnative_sample_app\n- The new location of the Code repository would look like `https://github.com/${GIT_USER}/cloudnative_sample_app`\n- Create a git resource yaml **git.yaml**, replace `<GIT_USERNAME>` with the git username or organization\n    ```bash\n    export GIT_USERNAME='<GIT_USERNAME>'\n    ```\n    ```bash\n    cat <<EOF >git.yaml\n    apiVersion: tekton.dev/v1alpha1\n    kind: PipelineResource\n    metadata:\n      name: source\n    spec:\n      type: git\n      params:\n        - name: revision\n          value: master\n        - name: url\n          value: https://github.com/$GIT_USERNAME/cloudnative_sample_app\n    EOF\n    ```\n    - Apply the `git.yaml`\n    ```bash\n    oc apply -f git.yaml -n $NAMESPACE\n    ```\n- Create an image resource yaml **image.yaml**, the image url needs to specify the target namespace in `$NAMESPACE` for the `default` ServiceAccount in the namespace to be able to pull the image from the internal registry\n    ```bash\n    cat <<EOF >image.yaml\n    apiVersion: tekton.dev/v1alpha1\n    kind: PipelineResource\n    metadata:\n      name: image\n    spec:\n      type: image\n      params:\n        - name: url\n          value: image-registry.openshift-image-registry.svc:5000/$NAMESPACE/cloudnative_sample_app\n    EOF\n    ```\n    - Apply the `image.yaml`\n    ```bash\n    oc apply -f image.yaml -n $NAMESPACE\n    ```\n- Verify the resources\n    ```bash\n    tkn resource ls  -n $NAMESPACE\n    ```\n    ```\n    NAME     TYPE    DETAILS\n    source   git     url: https://github.com/csantanapr/cloudnative_sample_app\n    image    image   url: image-registry.openshift-image-registry.svc:5000/bootcamp-cicd-carlos/cloudnative_sample_app\n    ```\n- Download the task file [task-build-git.yaml](/yamls/project-cicd/solution/task-build-git.yaml) to build the image, push the image to the registy, and update the Infra git repository\n- Apply manifest\n    ```bash\n    oc apply -f task-build-git.yaml -n $NAMESPACE\n    ```\n- Verify tasks\n    ```bash\n    tkn task ls -n $NAMESPACE\n    ```\n    ```\n    NAME        AGE\n    build-git   8 minutes ago\n    ```\n- Test the task using your own Infra git repository, replace the parameters values `<GIT_EMAIL>`, `<GIT_NAME>`, and `<GIT_REPOSITORY>` with your Infra git repository.\n- Excluding the protocol scheme `https://` for example `github.com/csantanapr/cloudnative_sample_app_deploy.git`\n    ```bash\n    export GIT_EMAIL='<GIT_EMAIL>'\n    export GIT_NAME='<GIT_NAME>'\n    export GIT_REPOSITORY='<GIT_REPOSITORY>'\n    ```\n    ```bash\n    tkn task start build-git \\\n            --showlog \\\n            -i source=source \\\n            -i image=image \\\n            -p GIT_EMAIL=$GIT_EMAIL \\\n            -p GIT_NAME=$GIT_NAME \\\n            -p GIT_REPOSITORY=$GIT_REPOSITORY \\\n            -s pipeline \\\n            -n $NAMESPACE\n    ```\n- Verify last task run \n    ```bash\n    tkn taskrun ls --limit 1 -n $NAMESPACE\n    ```\n    ```\n    NAME                  STARTED         DURATION    STATUS               \n    build-git-run-d2j88   7 minutes ago   2 minutes   Succeeded\n    ```\n- Create a Pipeline **pipeline.yaml** with the task, replace the parameters values `<GIT_EMAIL>`, `<GIT_NAME>`, and `<GIT_REPOSITORY>`  with your Infra git repository.\n- Excluding the protocol scheme `https://` for example `github.com/csantanapr/cloudnative_sample_app_deploy.git`\n    ```bash\n    export GIT_EMAIL='<GIT_EMAIL>'\n    export GIT_NAME='<GIT_NAME>'\n    export GIT_REPOSITORY='<GIT_REPOSITORY>'\n    ```\n    ```bash\n    cat <<EOF >pipeline.yaml\n    apiVersion: tekton.dev/v1alpha1\n    kind: Pipeline\n    metadata:\n      name: project-cicd\n    spec:\n      resources:\n        - name: source\n          type: git\n        - name: image\n          type: image\n      tasks:\n        - name: task\n          taskRef:\n            name: build-git\n          resources:\n            inputs:\n              - name: source\n                resource: source\n              - name: image\n                resource: image\n          params:\n            - name: GIT_REPOSITORY\n              value: $GIT_REPOSITORY\n            - name: GIT_EMAIL\n              value: $GIT_EMAIL\n            - name: GIT_NAME\n              value: $GIT_NAME\n    EOF\n    ```\n- Apply manifest\n    ```bash\n    oc apply -f pipeline.yaml -n $NAMESPACE\n    ```\n- Verify pipeline\n    ```bash\n    tkn pipeline ls -n $NAMESPACE\n    ```\n    ```\n    NAME           AGE              LAST RUN   STARTED   DURATION   STATUS\n    project-cicd   22 seconds ago   ---        ---       ---        ---\n    ```\n- Run the Pipeline using the sevice account `pipeline`\n    ```bash\n    tkn pipeline start project-cicd \\\n            --showlog \\\n            -r source=source \\\n            -r image=image \\\n            -s pipeline \\\n            -n $NAMESPACE\n    ```\n- Verify las Pipeline Run\n    ```bash\n    tkn pipelinerun ls --limit 1 -n $NAMESPACE\n    ```\n    ```\n    NAME                     STARTED         DURATION    STATUS               \n    project-cicd-run-wvf82   4 minutes ago   2 minutes   Succeeded\n    ```\n\n## Tekton Trigger Configuration\n\n- Create the Trigger Template file **trigger-template.yaml**\n    ```bash\n    cat <<'EOF' >trigger-template.yaml\n    apiVersion: tekton.dev/v1alpha1\n    kind: TriggerTemplate\n    metadata:\n      name: project-cicd\n    spec:\n      params:\n        - name: gitrevision\n          description: The git revision\n          default: master\n        - name: gitrepositoryurl\n          description: The git repository url\n      resourcetemplates:\n        - apiVersion: tekton.dev/v1alpha1\n          kind: PipelineRun\n          metadata:\n            generateName: project-cicd-run-\n          spec:\n            pipelineRef:\n              name: project-cicd\n            resources:\n              - name: image\n                resourceRef:\n                  name: image\n              - name: source\n                resourceSpec:\n                  type: git\n                  params:\n                    - name: revision\n                      value: $(params.gitrevision)\n                    - name: url\n                      value: $(params.gitrepositoryurl)\n    EOF\n    ```\n- Apply manifest\n    ```bash\n    oc apply -f trigger-template.yaml -n $NAMESPACE\n    ```\n- Create the Trigger Template file **trigger-binding.yaml**\n    ```bash\n    cat <<'EOF' >trigger-binding.yaml\n    apiVersion: tekton.dev/v1alpha1\n    kind: TriggerBinding\n    metadata:\n      name: project-cicd\n    spec:\n      params:\n        - name: gitrevision\n          value: $(body.head_commit.id)\n        - name: gitrepositoryurl\n          value: $(body.repository.url)\n        - name: contenttype\n          value: $(header.Content-Type)\n    EOF\n    ```\n- Apply manifest\n    ```bash\n    oc apply -f trigger-binding.yaml -n $NAMESPACE\n    ```\n- Create the Trigger Template file **trigger-listerner.yaml**\n    ```bash\n    cat <<'EOF' >trigger-listerner.yaml\n    apiVersion: tekton.dev/v1alpha1\n    kind: EventListener\n    metadata:\n      name: project-cicd\n    spec:\n      serviceAccountName: pipeline\n      triggers:\n        - name: project-cicd-trig\n          binding:\n            name: project-cicd\n          template:\n            name: project-cicd\n    EOF\n    ```\n- Apply manifest\n    ```bash\n    oc apply -f trigger-listerner.yaml -n $NAMESPACE\n    ```\n- To test in a new terminal start a port forward session\n    ```bash\n    kubectl port-forward $(oc get pod -o=name -l eventlistener=project-cicd) 8080 -n $NAMESPACE\n    ```\n- Now send a HTTP Request simulating a Github webhook event, replace the `url` value below.\n    ```bash\n    curl -X POST \\\n      https://el-project-cicd-bootcamp-cicd-carlos.cpat-dev-bootcamp-ocp43-afb9c6047b062b44e3f1b3ecfeba4309-0000.us-south.containers.appdomain.cloud \\\n      -H 'Content-Type: application/json' \\\n      -H 'X-Hub-Signature: sha1=2da37dcb9404ff17b714ee7a505c384758ddeb7b' \\\n      -d '{\n            \"head_commit\":\n            {\n                    \"id\": \"master\"\n            },\n            \"repository\":\n            {\n                    \"url\": \"https://github.com/csantanapr/cloudnative_sample_app.git\"\n            }\n    }'\n    ```\n- Verify Pipeline run is running\n    ```bash\n    tkn pipelinerun ls --limit 1 -n $NAMESPACE  \n    ```\n    ```                                                        \n    NAME                     STARTED         DURATION   STATUS             \n    project-cicd-run-xcjt8   5 seconds ago   ---        Running\n    ```\n    Get the logs\n    ```bash\n    tkn pipelinerun logs -f -a -n $NAMESPACE project-cicd-run-xcjt8\n    ```\n- Expose Event Listener service via secure route\n    ```bash\n    oc create route edge --service=el-project-cicd\n    ```\n- Get the URL to configure in Git repository Web Hook \n    ```bash\n    export GIT_WEBHOOL_URL=$(oc get route el-project-cicd -o jsonpath='{.spec.host}' -n $NAMESPACE)\n    echo \"https://$GIT_WEBHOOL_URL\"\n    ```\n- Create the Git Web Hook Manually to send `push` events or create programatically below, replace `<GIT_REPO_NAME>` for Code repo name\n    ```bash\n    export GIT_USERNAME='<GIT_USERNAME>'\n    export GIT_TOKEN='<GIT_TOKEN>'\n    export GIT_REPO_NAME='<GIT_REPO_NAME>'\n    ```\n- Run `curl` to create the web hook\n```bash\ncurl -v -X POST -u $GIT_USERNAME:$GIT_TOKEN \\\n-d \"{\\\"name\\\": \\\"web\\\",\\\"active\\\": true,\\\"events\\\": [\\\"push\\\"],\\\"config\\\": {\\\"url\\\": \\\"https://$GIT_WEBHOOL_URL\\\",\\\"content_type\\\": \\\"json\\\",\\\"insecure_ssl\\\": \\\"0\\\"}}\"  -L https://api.github.com/repos/$GIT_USERNAME/$GIT_REPO_NAME/hooks\n```\n**NOTE** Do not share the url, as it's not configure with secret, for production configure the listener and the git web hook with a secret\n- Make a change on the Code repository, and verify that Github sent the WebHook to the event listener, and that the Pipeline runs in OpenShift Console\n![WebHook to Pipeline](images/webhook-pipeline.png)\n- After the Pipeline run is done, wait a few minutes the application should be updated by ArgoCD\n![ArgoCD App Updated](images/argocd.png)\n","fileAbsolutePath":"/home/travis/build/ibm-cloud-architecture/learning-cloudnative-101/src/pages/project-cicd/solution.mdx"}}}}